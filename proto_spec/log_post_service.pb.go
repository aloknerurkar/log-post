// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log_post_service.proto

/*
Package LogPost is a generated protocol buffer package.

It is generated from these files:
	log_post_service.proto

It has these top-level messages:
	EmptyMessage
	EpInfo
	ConfigResp
	LogMsg
*/
package LogPost

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogLevel int32

const (
	// Discard all logs
	LogLevel_NOOP LogLevel = 0
	// Tracing is turned on.
	LogLevel_TRACE LogLevel = 1
	// Info logs. Used to log information relevant to app.
	LogLevel_INFO LogLevel = 2
	// Used to log errors.
	LogLevel_ERROR LogLevel = 4
	// Used to fatal situations.
	LogLevel_FATAL LogLevel = 8
)

var LogLevel_name = map[int32]string{
	0: "NOOP",
	1: "TRACE",
	2: "INFO",
	4: "ERROR",
	8: "FATAL",
}
var LogLevel_value = map[string]int32{
	"NOOP":  0,
	"TRACE": 1,
	"INFO":  2,
	"ERROR": 4,
	"FATAL": 8,
}

func (x LogLevel) String() string {
	return proto.EnumName(LogLevel_name, int32(x))
}
func (LogLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Message used to register client with the LogServer
type EpInfo struct {
	ServiceName    string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	ServiceVersion string `protobuf:"bytes,2,opt,name=service_version,json=serviceVersion" json:"service_version,omitempty"`
	IpAddr         string `protobuf:"bytes,3,opt,name=ip_addr,json=ipAddr" json:"ip_addr,omitempty"`
	LogLevel       int32  `protobuf:"varint,4,opt,name=log_level,json=logLevel" json:"log_level,omitempty"`
	ClientId       string `protobuf:"bytes,5,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *EpInfo) Reset()                    { *m = EpInfo{} }
func (m *EpInfo) String() string            { return proto.CompactTextString(m) }
func (*EpInfo) ProtoMessage()               {}
func (*EpInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EpInfo) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *EpInfo) GetServiceVersion() string {
	if m != nil {
		return m.ServiceVersion
	}
	return ""
}

func (m *EpInfo) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *EpInfo) GetLogLevel() int32 {
	if m != nil {
		return m.LogLevel
	}
	return 0
}

func (m *EpInfo) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type ConfigResp struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *ConfigResp) Reset()                    { *m = ConfigResp{} }
func (m *ConfigResp) String() string            { return proto.CompactTextString(m) }
func (*ConfigResp) ProtoMessage()               {}
func (*ConfigResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConfigResp) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// Log Message
type LogMsg struct {
	ClientId string   `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	LogLevel int32    `protobuf:"varint,2,opt,name=log_level,json=logLevel" json:"log_level,omitempty"`
	Message  []string `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
}

func (m *LogMsg) Reset()                    { *m = LogMsg{} }
func (m *LogMsg) String() string            { return proto.CompactTextString(m) }
func (*LogMsg) ProtoMessage()               {}
func (*LogMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogMsg) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *LogMsg) GetLogLevel() int32 {
	if m != nil {
		return m.LogLevel
	}
	return 0
}

func (m *LogMsg) GetMessage() []string {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "log_post.EmptyMessage")
	proto.RegisterType((*EpInfo)(nil), "log_post.EpInfo")
	proto.RegisterType((*ConfigResp)(nil), "log_post.ConfigResp")
	proto.RegisterType((*LogMsg)(nil), "log_post.LogMsg")
	proto.RegisterEnum("log_post.LogLevel", LogLevel_name, LogLevel_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LogPost service

type LogPostClient interface {
	GetHeartBeat(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	Register(ctx context.Context, in *EpInfo, opts ...grpc.CallOption) (*ConfigResp, error)
	LogReq(ctx context.Context, in *LogMsg, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type logPostClient struct {
	cc *grpc.ClientConn
}

func NewLogPostClient(cc *grpc.ClientConn) LogPostClient {
	return &logPostClient{cc}
}

func (c *logPostClient) GetHeartBeat(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/log_post.LogPost/GetHeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logPostClient) Register(ctx context.Context, in *EpInfo, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := grpc.Invoke(ctx, "/log_post.LogPost/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logPostClient) LogReq(ctx context.Context, in *LogMsg, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/log_post.LogPost/LogReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogPost service

type LogPostServer interface {
	GetHeartBeat(context.Context, *EmptyMessage) (*EmptyMessage, error)
	Register(context.Context, *EpInfo) (*ConfigResp, error)
	LogReq(context.Context, *LogMsg) (*EmptyMessage, error)
}

func RegisterLogPostServer(s *grpc.Server, srv LogPostServer) {
	s.RegisterService(&_LogPost_serviceDesc, srv)
}

func _LogPost_GetHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogPostServer).GetHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log_post.LogPost/GetHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogPostServer).GetHeartBeat(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogPost_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogPostServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log_post.LogPost/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogPostServer).Register(ctx, req.(*EpInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogPost_LogReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogPostServer).LogReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log_post.LogPost/LogReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogPostServer).LogReq(ctx, req.(*LogMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogPost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "log_post.LogPost",
	HandlerType: (*LogPostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeartBeat",
			Handler:    _LogPost_GetHeartBeat_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _LogPost_Register_Handler,
		},
		{
			MethodName: "LogReq",
			Handler:    _LogPost_LogReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log_post_service.proto",
}

func init() { proto.RegisterFile("log_post_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4d, 0xab, 0x9b, 0x40,
	0x14, 0x86, 0x63, 0x3e, 0x8c, 0x9e, 0x86, 0x54, 0x86, 0x92, 0x4a, 0xba, 0x49, 0xdd, 0x34, 0xed,
	0x22, 0x8b, 0xb6, 0xfb, 0xd6, 0x04, 0xd3, 0x06, 0x4c, 0x0c, 0x43, 0xe8, 0xa2, 0x14, 0xc4, 0xc6,
	0x13, 0x19, 0x50, 0xc7, 0xeb, 0x0c, 0x81, 0xfb, 0x8b, 0xee, 0x4f, 0xb8, 0x7f, 0xef, 0x32, 0x1a,
	0xc9, 0x07, 0xe4, 0xee, 0x3c, 0x8f, 0xcf, 0xc1, 0x97, 0xf7, 0x08, 0xa3, 0x94, 0x27, 0x61, 0xc1,
	0x85, 0x0c, 0x05, 0x96, 0x47, 0xb6, 0xc7, 0x59, 0x51, 0x72, 0xc9, 0x89, 0xd1, 0x70, 0x67, 0x08,
	0x03, 0x2f, 0x2b, 0xe4, 0xe3, 0x1a, 0x85, 0x88, 0x12, 0x74, 0x9e, 0x34, 0xd0, 0xbd, 0x62, 0x95,
	0x1f, 0x38, 0xf9, 0x08, 0x83, 0xd3, 0x56, 0x98, 0x47, 0x19, 0xda, 0xda, 0x44, 0x9b, 0x9a, 0xf4,
	0xcd, 0x89, 0x6d, 0xa2, 0x0c, 0xc9, 0x27, 0x78, 0xdb, 0x28, 0x47, 0x2c, 0x05, 0xe3, 0xb9, 0xdd,
	0xae, 0xac, 0xe1, 0x09, 0xff, 0xa9, 0x29, 0x79, 0x0f, 0x7d, 0x56, 0x84, 0x51, 0x1c, 0x97, 0x76,
	0xa7, 0x12, 0x74, 0x56, 0xb8, 0x71, 0x5c, 0x92, 0x0f, 0x60, 0xaa, 0x2c, 0x29, 0x1e, 0x31, 0xb5,
	0xbb, 0x13, 0x6d, 0xda, 0xa3, 0x2a, 0x9c, 0xaf, 0x66, 0xf5, 0x72, 0x9f, 0x32, 0xcc, 0x65, 0xc8,
	0x62, 0xbb, 0x57, 0xed, 0x19, 0x35, 0x58, 0xc5, 0xce, 0x67, 0x80, 0x05, 0xcf, 0x0f, 0x2c, 0xa1,
	0x28, 0x8a, 0x6b, 0x55, 0xbb, 0x51, 0xff, 0x81, 0xee, 0xf3, 0x64, 0x2d, 0x92, 0x57, 0xb5, 0xeb,
	0x2c, 0xed, 0x9b, 0x2c, 0x36, 0xf4, 0xb3, 0xba, 0x23, 0xbb, 0x33, 0xe9, 0x4c, 0x4d, 0xda, 0x8c,
	0x5f, 0x7e, 0x80, 0xe1, 0x37, 0x96, 0x01, 0xdd, 0x4d, 0x10, 0x6c, 0xad, 0x16, 0x31, 0xa1, 0xb7,
	0xa3, 0xee, 0xc2, 0xb3, 0x34, 0x05, 0x57, 0x9b, 0x65, 0x60, 0xb5, 0x15, 0xf4, 0x28, 0x0d, 0xa8,
	0xd5, 0x55, 0x8f, 0x4b, 0x77, 0xe7, 0xfa, 0x96, 0xf1, 0xf5, 0x59, 0x83, 0xbe, 0xcf, 0x93, 0x2d,
	0x17, 0x92, 0xfc, 0x84, 0xc1, 0x2f, 0x94, 0xbf, 0x31, 0x2a, 0xe5, 0x1c, 0x23, 0x49, 0x46, 0xb3,
	0xe6, 0x54, 0xb3, 0xcb, 0x3b, 0x8d, 0xef, 0x70, 0xa7, 0x45, 0xbe, 0x83, 0x41, 0x31, 0x61, 0x42,
	0x62, 0x49, 0xac, 0x0b, 0xab, 0x3a, 0xea, 0xf8, 0xdd, 0x99, 0x9c, 0xdb, 0xab, 0xb6, 0x54, 0x45,
	0x14, 0x1f, 0x2e, 0x77, 0xea, 0xd2, 0xee, 0x7f, 0x6b, 0x6e, 0xfe, 0x6d, 0x82, 0xff, 0xd7, 0xab,
	0x3f, 0xeb, 0xdb, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x49, 0x79, 0xc0, 0x73, 0x02, 0x00,
	0x00,
}
